---
title: "Vanessa"
format: 
  dashboard: 
    logo: "images/logo.png"
    orientation: columns
---

## Column {width="35%"}

```{r, loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(httr2)
library(gt)
```

```{r, createaccesstoken}
#| echo: false
#| include: false
client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")

client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")

# Generate Spotify access token
req_access_token <- request("https://accounts.spotify.com/api/token") |> 
  req_method("POST") |> 
  req_body_raw(paste0(
    "grant_type=client_credentials&client_id=",
    client_id,
    "&client_secret=",
    client_secret
  ), "application/x-www-form-urlencoded") |> 
  req_perform() |> 
  resp_body_json()
spotify_access_token <- req_access_token$access_token
```

```{r, getplaylist}
playlist <- request("https://api.spotify.com/v1/playlists/3NcJfeqTzJ9DitQMNUezuh") |> 
  req_method("GET") |> 
  req_headers(
    Authorization = paste0("Bearer ", spotify_access_token),
  ) |> 
  req_perform() |> 
  resp_body_json()

playlist_df <- data.frame(
  song_name = unlist(lapply(playlist$tracks$items, FUN = function(x) { x$track$name })),
  song_id = unlist(lapply(playlist$tracks$items, FUN = function(x) { x$track$id })),
  artist_name = unlist(lapply(playlist$tracks$items, FUN = function(x) {x$track$album$artists[[1]]$name})),
  album_art = unlist(lapply(playlist$tracks$items, FUN = function(x) {x$track$album$images[[1]]$url})),
  track_duration = unlist(lapply(playlist$tracks$items, FUN = function(x) {x$track$duration_ms})), 
  popularity = unlist(lapply(playlist$tracks$items, FUN = function(x) {x$track$popularity}))
)
```

```{r, createtable}
#| expandable: false
generate_svg_circle <- function(popularity_value) {
  popularity_value <- as.numeric(popularity_value)
  
  # Calculate the radius of the circle
  radius <- 10 + 15 * (popularity_value / 100)  
  
  # Interpolate the color from red (popularity = 0) to green (popularity = 100)
  circle_colour_picker <- colorRampPalette(c("#B91d1d", "#ED8E11", "#EDDE11", "#1DB954"))
  
  # There are 101 colour values since popularity ranges from 0 to 100
  color <- circle_colour_picker(101)[popularity_value + 1]
  
  # Generate the SVG code for the circle
  svg_code <- sprintf(
    '<svg height="%1$s" width="%1$s"><circle cx="%2$s" cy="%2$s" r="%2$s" stroke="none" stroke-width="0" fill="%3$s" /><text class="circle-text" x="%2$s" y="%2$s" font-size="%4$s" fill="white" text-anchor="middle" dy=".3em">%5$s</text></svg>',
    2 * radius,        # SVG width and height
    radius,            # Circle center x, y
    color,             # Fill color used also for stroke
    radius * 0.6,      # Font size based on radius
    popularity_value   # Text to display
  )
  return(svg_code)
}

# Create the gt table with custom formatting
playlist_df |>
  select(album_art, song_name, artist_name, track_duration, popularity) |>
  gt(id = "custom") |>
  cols_label(
    album_art = md("**Song**"),
    song_name = "",
    artist_name = md("**Artist**"),
    track_duration = html('<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="15" height="15" viewBox="0,0,255.998,255.998"><g fill="#ffffff" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><g transform="scale(10.66667,10.66667)"><path d="M12,2c-5.523,0 -10,4.477 -10,10c0,5.523 4.477,10 10,10c5.523,0 10,-4.477 10,-10c0,-5.523 -4.477,-10 -10,-10zM14.586,16l-3.293,-3.293c-0.188,-0.188 -0.293,-0.442 -0.293,-0.707v-5c0,-0.552 0.448,-1 1,-1v0c0.552,0 1,0.448 1,1v4.586l3,3c0.39,0.39 0.39,1.024 0,1.414v0c-0.39,0.39 -1.024,0.39 -1.414,0z"></path></g></g></svg>'),
    popularity = md("**Popularity**")
  ) |>
  text_transform(
    locations = cells_body(columns = album_art),
    fn = function(x) { web_image(url = x, height = 50) }
  ) |>
  text_transform(
    fn = function(x) {
      generate_svg_circle(x)
    },
    locations = cells_body(columns = popularity)
  ) |> 
  fmt(
    columns = track_duration, 
    fns = function(x) {
      num_minutes <- floor(x / 60000)
      num_seconds <- ifelse(round((x %% 60000) / 1000) == 60, 59, round((x %% 60000) / 1000))
      sprintf("%d:%02d", num_minutes, num_seconds)
    }
  ) |> 
  cols_align(
    align = "center",
    columns = popularity
  ) |> 
  tab_source_note(
    source_note = md("**Source:** [Vanessa](https://open.spotify.com/playlist/3NcJfeqTzJ9DitQMNUezuh)")
  ) |> 
  tab_options(
    table.font.color = "#FFFFFF",
    table.background.color = "#191414",
    table.font.size = px(12),
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    table_body.hlines.color = "transparent",
    table_body.border.bottom.color = "transparent",
    column_labels.border.bottom.color = "transparent",
    column_labels.border.top.color = "transparent",
    source_notes.background.color = "#282828"
  ) |> 
  tab_style_body(
    style = cell_borders(
      sides = c("top", "bottom"),
      weight = px(0) # Remove row borders
    ),
    fn = function(x) { is.numeric(x) | is.character(x) }
  ) |> 
  opt_css(
    css = "
    table tr:nth-child(odd) {
      background-color: #282828;
    }
      
    table tr:hover {
      background-color: #383838;
    }
    
    .cell-output-display {
      overflow-x: unset !important;
    }
    
    div#custom {
      overflow-x: unset !important;
      overflow-y: unset !important;
    }
    
    #custom .gt_col_heading {
      position: sticky !important;
      top: -5px !important;
      z-index: 10 !important;
    }
    "
  )
```

## Column {width="65%"}

### Row {height="10%"}

```{r}
#| echo: false
#| include: false
ojs_define(playlist_ojs = playlist_df)
```


```{ojs}
//| expandable: false
vanessa_playlist = transpose(playlist_ojs)

// Create a dropdown menu of the songs

viewof songDropdown = Inputs.select(
  vanessa_playlist.map(d => d.song_name),
  {
    label: "Choose a song",
    unique: true
  }
)
```


### Row {height="70%"}

```{ojs}
//| expandable: false
html`<iframe class="custom-iframe" style="border-radius:12px; display: flex; justify-content: center; align-items: center;" 
  src=${`https://open.spotify.com/embed/track/${vanessa_playlist.find(song => song.song_name === songDropdown).song_id}?utm_source=generator&theme=0`} 
  width="100%" 
  height="352" 
  frameBorder="0" 
  allowfullscreen="" 
  allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
  loading="lazy">
</iframe>`
```

### Row {height="20%"}

:::{.card expandable="false"}
<div style="background-color: #7D3C98; color: white; border-radius: 10px; padding: 10px; text-align: center; display: flex; align-items: center; justify-content: center; height: 100%;">

  <span style="font-size: 1vw; width: 100%;">
    **Happy Birthday Vanessa!!**<br>These are the songs that remind me of you<br>You make me feel like I am floating.
  </span>

</div>
:::